/**
 * 利用闭包的特性，既可以避免内部临时变量影响全局空间，又可以在插件内部继续使用 $ 作为 jQuery 的别名。
 */

// 常见的 jQuery 插件的结构如下

// 为了更好的兼容性，开始前有个分号
;(function ($) {// 此处将 $ 作为匿名函数的形参
    // 这里写代码，可以使用 $ 作为 jQuery 的缩写别名
})(jQuery);// 这里将 jQuery 作为实参传递给匿名函数


// 示例代码
;(function ($) {
    // 定义一个局部变量 foo，仅函数内部可以访问，外部无法访问
    var foo = "";
    var bar = function(){
        // 在匿名函数内部的函数都可以访问 foo，即便是在匿名函数的外部调用 bar() 的时候，也可以在
        // bar() 的内部访问到 foo，但在匿名函数的外部直接访问 foo 是做不到的。
    };

    // 下面的语句让匿名函数内部的函数 bar() 逃逸到全局可访问的范围内，这样就可以在匿名函数的外部通过调用
    // jQuery.BAR() 来访问内部定义的函数 bar()，并且内部函数 bar() 也能访问匿名函数内的变量 foo
    $.BAR = bar;
})(jQuery);// 这里将 jQuery 作为实参传递给匿名函数
